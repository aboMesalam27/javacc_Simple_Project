/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. Xml.jj */
/*@egen*/options {
	STATIC = false;
}

PARSER_BEGIN(Xml)
	public class Xml/*@bgen(jjtree)*/implements XmlTreeConstants/*@egen*/{/*@bgen(jjtree)*/
  protected JJTXmlState jjtree = new JJTXmlState();

/*@egen*/
		public static void main(String[] args) throws Exception{
			Xml D = new Xml(System.in);
		      SimpleNode root = D.D();
			root.dump("");
		}
	}
PARSER_END(Xml)

SKIP: {" "|"\t"}
SKIP: {"\n"|"\r"|"\r\n"}
TOKEN: {<EQ: "=">}
TOKEN: {<OpenT: "<">}
TOKEN: {<ClosedT: ">">}
TOKEN: {<FS: "/">}
TOKEN: {<ID: ("_"|<LETTER>)("_"|<ALPHANUM>)*>}
TOKEN: {<COMMA: ",">}
TOKEN: {<DQ:"\"">}
TOKEN: {<SL:"</">}
TOKEN: {<DIG:["0"-"9"]>}
TOKEN:
{
 <#DIGIT:["0"-"9"]>
 |<#LETTER:["a"-"z","A"-"Z"]>
 |<#ALPHANUM:<LETTER>|<DIGIT>>
}

SimpleNode D()    :
{/*@bgen(jjtree) D */
  SimpleNode jjtn000 = new SimpleNode(JJTD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) D */
  try {
/*@egen*/
  S() <EOF>/*@bgen(jjtree)*/
            {
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
            }
/*@egen*/ {return jjtn000;}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void S()    :
{/*@bgen(jjtree) S */
  SimpleNode jjtn000 = new SimpleNode(JJTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) S */
  try {
/*@egen*/
  OT() (A())* CT()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ 
}

void A()    :
{/*@bgen(jjtree) A */
  SimpleNode jjtn000 = new SimpleNode(JJTA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) A */
 try {
/*@egen*/
 <OpenT> Text() T() SL()/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/  
}

void T()    :
{/*@bgen(jjtree) T */
  SimpleNode jjtn000 = new SimpleNode(JJTT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) T */
  try {
/*@egen*/
  Text() <EQ> VALUE()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void VALUE()       :
{/*@bgen(jjtree) Value */
  SimpleNode jjtn000 = new SimpleNode(JJTVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Value */
  try {
/*@egen*/
  <DQ> Text() <DQ> |Digit() (<COMMA> T())?/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Digit()       :
{/*@bgen(jjtree) Digit */
 SimpleNode jjtn000 = new SimpleNode(JJTDIGIT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Digit */
        try {
/*@egen*/
	t = <DIG>/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                  }
/*@egen*/ {jjtn000.value = t.image;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void OT()    :
{/*@bgen(jjtree) OT */
  SimpleNode jjtn000 = new SimpleNode(JJTOT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) OT */
  try {
/*@egen*/
  <OpenT> Text() <ClosedT>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void CT()     :
{/*@bgen(jjtree) CT */
  SimpleNode jjtn000 = new SimpleNode(JJTCT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) CT */
  try {
/*@egen*/
  <SL> Text() <ClosedT>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Text()      :
{/*@bgen(jjtree) Text */
 SimpleNode jjtn000 = new SimpleNode(JJTTEXT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Text */
  try {
/*@egen*/
  t = <ID>/*@bgen(jjtree)*/
           {
             jjtree.closeNodeScope(jjtn000, true);
             jjtc000 = false;
           }
/*@egen*/ {jjtn000.value = t.image;}/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/

}

void SL()    :
{/*@bgen(jjtree) SL */
  SimpleNode jjtn000 = new SimpleNode(JJTSL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SL */
 try {
/*@egen*/
 <FS> <ClosedT>/*@bgen(jjtree)*/
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}