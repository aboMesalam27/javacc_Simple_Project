options {
	STATIC = false;
}

PARSER_BEGIN(Xml)
	public class Xml{
		public static void main(String[] args) throws Exception{
			Xml D = new Xml(System.in);
		      SimpleNode root = D.D();
			root.dump("");
		}
	}
PARSER_END(Xml)

SKIP: {" "|"\t"}
SKIP: {"\n"|"\r"|"\r\n"}
TOKEN: {<EQ: "=">}
TOKEN: {<OpenT: "<">}
TOKEN: {<ClosedT: ">">}
TOKEN: {<FS: "/">}
TOKEN: {<ID: ("_"|<LETTER>)("_"|<ALPHANUM>)*>}
TOKEN: {<COMMA: ",">}
TOKEN: {<DQ:"\"">}
TOKEN: {<SL:"</">}
TOKEN: {<DIG:["0"-"9"]>}
TOKEN:
{
 <#DIGIT:["0"-"9"]>
 |<#LETTER:["a"-"z","A"-"Z"]>
 |<#ALPHANUM:<LETTER>|<DIGIT>>
}

SimpleNode D() #D :
{}
{
  S() <EOF> {return jjtThis;}
}

void S() #S :
{}
{
  OT() (A())* CT() 
}

void A() #A :
{}
{
 <OpenT> Text() T() SL()  
}

void T() #T :
{}
{
  Text() <EQ> VALUE()
}

void VALUE() #Value:
{}
{
  <DQ> Text() <DQ> |Digit() (<COMMA> T())?
}

void Digit() #Digit:
{Token t;}
{
	t = <DIG> {jjtThis.value = t.image;}
}

void OT() #OT:
{}
{
  <OpenT> Text() <ClosedT>
}

void CT() #CT :
{}
{
  <SL> Text() <ClosedT>
}

void Text() #Text:
{Token t;}
{
  t = <ID> {jjtThis.value = t.image;}

}

void SL() #SL:
{}
{
 <FS> <ClosedT>
}






